#import PIL.Image
#import PIL.ImageTk
from Tkinter import *
from functions import *
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

def func():
    def f1():
        l=c1(var1.get(),var2.get(),var3.get())
        eltemp.delete(0,END)
        eltemp.insert(INSERT,round(l[2],2))
        ehtemp.delete(0,END)
        ehtemp.insert(INSERT,round(l[1],2))
        eprep.delete(0,END)
        eprep.insert(INSERT,round(l[3],2))
        eevap.delete(0,END)
        eevap.insert(INSERT,round(l[4],2))
        ecloud.delete(0,END)
        ecloud.insert(INSERT,round(l[5],2))
        eyield.delete(0,END)
        eyield.insert(INSERT,round(l[0],2))
    def f2():
        fig=c2(var1.get(),var2.get())
        canvas = FigureCanvasTkAgg(fig, master=branch)
        canvas.get_tk_widget().place(x=0,y=100)
        canvas.draw()
    def f3():
        l=c3(var2.get(),var3.get())
        for i in range(len(l)-1):
            e[i][0].delete(0,END)
            e[i][1].delete(0,END)
            e[i][0].insert(INSERT,l[i][0])
            e[i][1].insert(INSERT,round(l[i][1],2))
        canvas = FigureCanvasTkAgg(l[len(l)-1], master=branch)
        canvas.get_tk_widget().place(x=0,y=250)
        canvas.draw()
    def f4():
        l=c4(var1.get(),var3.get())
        for i in range(len(l)-1):
            e[i][0].delete(0,END)
            e[i][1].delete(0,END)
            e[i][0].insert(INSERT,l[i][0])
            e[i][1].insert(INSERT,round(l[i][1],2))
        canvas = FigureCanvasTkAgg(l[len(l)-1], master=branch)
        canvas.get_tk_widget().place(x=0,y=210)
        canvas.draw()
    def f5():
        l=c5(var1.get(),var2.get(),var3.get())
        eltemp.delete(0,END)
        eltemp.insert(INSERT,round(l[2],2))
        ehtemp.delete(0,END)
        ehtemp.insert(INSERT,round(l[1],2))
        eprep.delete(0,END)
        eprep.insert(INSERT,round(l[3],2))
        eevap.delete(0,END)
        eevap.insert(INSERT,round(l[4],2))
        ecloud.delete(0,END)
        ecloud.insert(INSERT,round(l[5],2))
        eyield.delete(0,END)
        eyield.insert(INSERT,round(l[0][0],2))
        eyield1.delete(0,END)
        eyield1.insert(INSERT,round(l[0][1],2))
        eyield2.delete(0,END)
        eyield2.insert(INSERT,round(l[0][2],2))
        eyield3.delete(0,END)
        eyield3.insert(INSERT,round(l[0][3],2))
        eyield4.delete(0,END)
        eyield4.insert(INSERT,round(l[0][4],2))
        canvas = FigureCanvasTkAgg(l[8], master=branch)
        canvas.get_tk_widget().place(x=330,y=0)
        canvas.draw()
        canvas = FigureCanvasTkAgg(l[7], master=branch)
        canvas.get_tk_widget().place(x=730,y=0)
        canvas.draw()
        canvas = FigureCanvasTkAgg(l[11], master=branch)
        canvas.get_tk_widget().place(x=1130,y=0)
        canvas.draw()
        canvas = FigureCanvasTkAgg(l[9], master=branch)
        canvas.get_tk_widget().place(x=330,y=400)
        canvas.draw()
        canvas = FigureCanvasTkAgg(l[10], master=branch)
        canvas.get_tk_widget().place(x=730,y=400)
        canvas.draw()
        canvas = FigureCanvasTkAgg(l[6], master=branch)
        canvas.get_tk_widget().place(x=1130,y=400)
        canvas.draw()
    def f6():
        l=c6(var2.get(),var3.get())
        for i in range(len(l)-1):
            e[i][0].delete(0,END)
            e[i][1].delete(0,END)
            e[i][0].insert(INSERT,l[i][0])
            e[i][1].insert(INSERT,round(l[i][1],2))
        canvas = FigureCanvasTkAgg(l[len(l)-1], master=branch)
        canvas.get_tk_widget().place(x=0,y=250)
        canvas.draw()
    def f7():
        l=c7(var1.get(),var3.get())
        for i in range(len(l)-1):
            e[i][0].delete(0,END)
            e[i][1].delete(0,END)
            e[i][0].insert(INSERT,l[i][0])
            e[i][1].insert(INSERT,round(l[i][1],2))
        canvas = FigureCanvasTkAgg(l[len(l)-1], master=branch)
        canvas.get_tk_widget().place(x=0,y=210)
        canvas.draw()

    val=v.get()
    if (val!=0):
        branch=Toplevel()
        var1=StringVar()
        var2=StringVar()
        var3=IntVar()
        if (val==1):
            Label(branch,text="Choose State:").grid(row=0,column=0)
            var1.set(states[0])
            OptionMenu(branch,var1,*states).grid(row=0,column=1)
            Label(branch,text="Choose Crop:").grid(row=1,column=0)
            var2.set(crops[0])
            OptionMenu(branch,var2,*crops).grid(row=1,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(gyears[0])
            OptionMenu(branch,var3,*gyears).grid(row=2,column=1)
            Label(branch,text="Avg. Low Temp.:").grid(row=4,column=0)
            Label(branch,text="Avg. High Temp.:").grid(row=5,column=0)
            Label(branch,text="Cloud cover:").grid(row=6,column=0)
            Label(branch,text="Precipitation:").grid(row=7,column=0)
            Label(branch,text="Potential Evaporation:").grid(row=8,column=0)
            Label(branch,text="Yield:").grid(row=9,column=0)
            Label(branch,text="degree Celsius").grid(row=4,column=2)
            Label(branch,text="degree Celsius").grid(row=5,column=2)
            Label(branch,text="%").grid(row=6,column=2)
            Label(branch,text="in mm").grid(row=7,column=2)
            Label(branch,text="in mm").grid(row=8,column=2)
            Label(branch,text="kg/hectare").grid(row=9,column=2)
            eltemp=Entry(branch,justify='center')
            eltemp.grid(row=4,column=1)
            ehtemp=Entry(branch,justify='center')
            ehtemp.grid(row=5,column=1)
            ecloud=Entry(branch,justify='center')
            ecloud.grid(row=6,column=1)
            eprep=Entry(branch,justify='center')
            eprep.grid(row=7,column=1)
            eevap=Entry(branch,justify='center')
            eevap.grid(row=8,column=1)
            eyield=Entry(branch,justify='center')
            eyield.grid(row=9,column=1)
            Button(branch,text="OK",command=f1).grid(row=1,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=10,column=1)
        if (val==2):
            branch.geometry('640x580')
            Label(branch,text="Choose State:").grid(row=0,column=0)
            var1.set(states[0])
            OptionMenu(branch,var1,*states).grid(row=0,column=1)
            Label(branch,text="Choose Crop:").grid(row=1,column=0)
            var2.set(crops[0])
            OptionMenu(branch,var2,*crops).grid(row=1,column=1)
            Button(branch,text="Plot",command=f2).grid(row=2,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=2,column=3)
        if (val==3):
            branch.geometry('640x730')
            Label(branch,text="Choose Crop:").grid(row=1,column=0)
            var2.set(crops[0])
            OptionMenu(branch,var2,*crops).grid(row=1,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(gyears[0])
            OptionMenu(branch,var3,*gyears).grid(row=2,column=1)
            Label(branch,text="State").grid(row=4,column=0)
            Label(branch,text="Yield (in kg/hectare)").grid(row=4,column=1)
            rowno=5
            e=[]
            for i in range(len(states)):
                e.append([])
                e[i].append(Entry(branch,justify='center'))
                e[i].append(Entry(branch,justify='center'))
                e[i][0].grid(row=rowno,column=0)
                e[i][1].grid(row=rowno,column=1)
                rowno+=1
            e[0][0].config(font=('Times',16,'bold italic'))
            e[0][1].config(font=('Times',16,'bold italic'))
            Button(branch,text="OK",command=f3).grid(row=3,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=rowno,column=2)
        if (val==4):
            branch.geometry('640x700')
            Label(branch,text="Choose State:").grid(row=0,column=0)
            var1.set(states[0])
            OptionMenu(branch,var1,*states).grid(row=0,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(gyears[0])
            OptionMenu(branch,var3,*gyears).grid(row=2,column=1)
            Label(branch,text="Crop").grid(row=4,column=0)
            Label(branch,text="Yield (in kg/hectare)").grid(row=4,column=1)
            rowno=5
            e=[]
            for i in range(len(crops)):
                e.append([])
                e[i].append(Entry(branch,justify='center'))
                e[i].append(Entry(branch,justify='center'))
                e[i][0].grid(row=rowno,column=0)
                e[i][1].grid(row=rowno,column=1)
                rowno+=1
            e[0][0].config(font=('Times',16,'bold italic'))
            e[0][1].config(font=('Times',16,'bold italic'))
            Button(branch,text="OK",command=f4).grid(row=3,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=rowno,column=2)
        if (val==5):
            branch.state('zoomed')
            Label(branch,text="Choose State:").grid(row=0,column=0)
            var1.set(states[0])
            OptionMenu(branch,var1,*states).grid(row=0,column=1)
            Label(branch,text="Choose Crop:").grid(row=1,column=0)
            var2.set(crops[0])
            OptionMenu(branch,var2,*crops).grid(row=1,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(pyears[0])
            OptionMenu(branch,var3,*pyears).grid(row=2,column=1)
            Label(branch,text="Avg. Low Temp.:").grid(row=4,column=0)
            Label(branch,text="Avg. High Temp.:").grid(row=5,column=0)
            Label(branch,text="Cloud cover:").grid(row=6,column=0)
            Label(branch,text="Precipitation:").grid(row=7,column=0)
            Label(branch,text="Potential Evaporation:").grid(row=8,column=0)
            Label(branch,text="Yield1:").grid(row=9,column=0)
            Label(branch,text="Yield2:").grid(row=10,column=0)
            Label(branch,text="Yield3:").grid(row=11,column=0)
            Label(branch,text="Yield4:").grid(row=12,column=0)
            Label(branch,text="Yield:",font=('Times',16,'bold italic')).place(x=0,y=300)
            Label(branch,text="degree Celsius").grid(row=4,column=2)
            Label(branch,text="degree Celsius").grid(row=5,column=2)
            Label(branch,text="%").grid(row=6,column=2)
            Label(branch,text="mm").grid(row=7,column=2)
            Label(branch,text="mm").grid(row=8,column=2)
            Label(branch,text="kg/hectare").grid(row=9,column=2)
            Label(branch,text="kg/hectare").grid(row=10,column=2)
            Label(branch,text="kg/hectare").grid(row=11,column=2)
            Label(branch,text="kg/hectare").grid(row=12,column=2)
            Label(branch,text="kg/hectare",font=('Times',16,'bold italic')).place(x=0,y=350)
            eltemp=Entry(branch,justify='center')
            eltemp.grid(row=4,column=1)
            ehtemp=Entry(branch,justify='center')
            ehtemp.grid(row=5,column=1)
            ecloud=Entry(branch,justify='center')
            ecloud.grid(row=6,column=1)
            eprep=Entry(branch,justify='center')
            eprep.grid(row=7,column=1)
            eevap=Entry(branch,justify='center')
            eevap.grid(row=8,column=1)
            eyield1=Entry(branch,justify='center')
            eyield1.grid(row=9,column=1)
            eyield2=Entry(branch,justify='center')
            eyield2.grid(row=10,column=1)
            eyield3=Entry(branch,justify='center')
            eyield3.grid(row=11,column=1)
            eyield4=Entry(branch,justify='center')
            eyield4.grid(row=12,column=1)
            eyield=Entry(branch,justify='center')
            eyield.place(x=0,y=325)
            eyield.config(font=('Times',16,'bold italic'))
            Button(branch,text="OK",command=f5).grid(row=1,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=2,column=2)
        if (val==6):
            branch.geometry('640x730')
            Label(branch,text="Choose Crop:").grid(row=1,column=0)
            var2.set(crops[0])
            OptionMenu(branch,var2,*crops).grid(row=1,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(pyears[0])
            OptionMenu(branch,var3,*pyears).grid(row=2,column=1)
            Label(branch,text="State").grid(row=4,column=0)
            Label(branch,text="Yield (in kg/hectare)").grid(row=4,column=1)
            rowno=5
            e=[]
            for i in range(len(states)):
                e.append([])
                e[i].append(Entry(branch,justify='center'))
                e[i].append(Entry(branch,justify='center'))
                e[i][0].grid(row=rowno,column=0)
                e[i][1].grid(row=rowno,column=1)
                rowno+=1
            e[0][0].config(font=('Times',16,'bold italic'))
            e[0][1].config(font=('Times',16,'bold italic'))
            Button(branch,text="OK",command=f6).grid(row=3,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=rowno,column=2)
        if (val==7):
            branch.geometry('640x700')
            Label(branch,text="Choose State:").grid(row=0,column=0)
            var1.set(states[0])
            OptionMenu(branch,var1,*states).grid(row=0,column=1)
            Label(branch,text="Choose Year:").grid(row=2,column=0)
            var3.set(pyears[0])
            OptionMenu(branch,var3,*pyears).grid(row=2,column=1)
            Label(branch,text="Crop").grid(row=4,column=0)
            Label(branch,text="Yield (in kg/hectare)").grid(row=4,column=1)
            rowno=5
            e=[]
            for i in range(len(crops)):
                e.append([])
                e[i].append(Entry(branch,justify='center'))
                e[i].append(Entry(branch,justify='center'))
                e[i][0].grid(row=rowno,column=0)
                e[i][1].grid(row=rowno,column=1)
                rowno+=1
            e[0][0].config(font=('Times',16,'bold italic'))
            e[0][1].config(font=('Times',16,'bold italic'))
            Button(branch,text="OK",command=f7).grid(row=3,column=2)
            Button(branch,text="Quit",command=branch.destroy).grid(row=rowno,column=2)

root=Tk()
root.state('zoomed')
root.title('Agricultural Data Analysis and Estimation')
#image = PIL.Image.open('background.jpg')
#photo_image = PIL.ImageTk.PhotoImage(image)
#Label(root, image = photo_image).pack()

Label(root,text="AGRICULTURAL  DATA  ANALYSIS  AND  ESTIMATION",font=('Papyrus',20)).place(x=300,y=20)
v=IntVar()
Label(root,text="Access existing data:",font=('Perpetua',18)).place(x=20,y=100)
Radiobutton(root,text="All features pertaining to production of a crop in a particular state in a particular year",variable=v,value=1,font=('Garamond',16)).place(x=20,y=160,anchor=W)
Radiobutton(root,text="bar graph of yield of a crop in a state over all years",variable=v,value=2,font=('Garamond',16)).place(x=20,y=210,anchor=W)
Radiobutton(root,text="States which has highest yield for a crop each year",variable=v,value=3,font=('Garamond',16)).place(x=20,y=260,anchor=W)
Radiobutton(root,text="Crops with highest yield in a state each year",variable=v,value=4,font=('Garamond',16)).place(x=20,y=310,anchor=W)
Label(root,text="Predict future data:",font=('Perpetua',18)).place(x=20,y=380)
Radiobutton(root,text="Predict the yield of a crop in a state",variable=v,value=5,font=('Garamond',16)).place(x=20,y=440,anchor=W)
Radiobutton(root,text="Predict which state will have the highest yield for the crop",variable=v,value=6,font=('Garamond',16)).place(x=20,y=490,anchor=W)
Radiobutton(root,text="Predict which crop will have highest yield in a state",variable=v,value=7,font=('Garamond',16)).place(x=20,y=540,anchor=W)
Button(root, text="Next", command=func,font=('Times',16)).place(x=1300,y=650)
Button(root, text="Exit", command=root.destroy,font=('Times',16)).place(x=1400,y=650)
root.mainloop()
